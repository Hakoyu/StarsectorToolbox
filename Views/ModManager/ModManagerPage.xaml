<Page
  x:Class="StarsectorToolbox.Views.ModManager.ModManagerPage"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:ST="clr-namespace:StarsectorToolbox.Models.ST"
  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
  xmlns:emoji="clr-namespace:Emoji.Wpf;assembly=Emoji.Wpf"
  xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  xmlns:pu="clr-namespace:Panuon.WPF.UI;assembly=Panuon.WPF.UI"
  xmlns:vm="clr-namespace:StarsectorToolbox.ViewModels.ModManager"
  x:Name="Page_MainPage"
  Title="ModManager"
  d:DesignHeight="450"
  d:DesignWidth="800"
  x:ClassModifier="internal"
  FontSize="16"
  mc:Ignorable="d">
  <d:Page.DataContext>
    <vm:ModManagerPageViewModel />
  </d:Page.DataContext>
  <Page.Resources>
    <Style
      x:Key="CenterAlignmentStyle"
      BasedOn="{StaticResource {x:Type TextBlock}}"
      TargetType="TextBlock">
      <Setter Property="MaxHeight" Value="{Binding ActualHeight, ElementName=Button_AddUserGroup}" />
      <Setter Property="TextAlignment" Value="Center" />
      <Setter Property="VerticalAlignment" Value="Center" />
      <Setter Property="ToolTip" Value="{Binding Text, RelativeSource={RelativeSource Mode=Self}}" />
    </Style>
    <Style
      x:Key="GameVersionStyle"
      BasedOn="{StaticResource CenterAlignmentStyle}"
      TargetType="TextBlock">
      <Setter Property="Background" Value="{DynamicResource ColorLight1}" />
      <Setter Property="ToolTip" Value="{Binding DataContext.I18n.I18nRes.SupportedVersionSameAsGameVersion, ElementName=Page_MainPage}" />
      <Style.Triggers>
        <DataTrigger Binding="{Binding IsSameToGameVersion}" Value="False">
          <Setter Property="Background" Value="{DynamicResource ColorYellow2}" />
          <Setter Property="ToolTip" Value="{Binding DataContext.I18n.I18nRes.SupportedVersionNotSameAsGameVersion, ElementName=Page_MainPage}" />
        </DataTrigger>
      </Style.Triggers>
    </Style>
    <Style
      x:Key="UtilityStyle"
      BasedOn="{StaticResource CenterAlignmentStyle}"
      TargetType="TextBlock">
      <Setter Property="Text" Value="✅" />
      <Setter Property="ToolTip" Value="{Binding DataContext.I18n.I18nRes.IsUtilityMod, ElementName=Page_MainPage}" />
      <Style.Triggers>
        <DataTrigger Binding="{Binding IsUtility}" Value="False">
          <Setter Property="Text" Value="❎" />
          <Setter Property="ToolTip" Value="{Binding DataContext.I18n.I18nRes.NotUtilityMod, ElementName=Page_MainPage}" />
        </DataTrigger>
      </Style.Triggers>
    </Style>
    <Style x:Key="MissDependenciesStyle" TargetType="StackPanel">
      <Setter Property="Height" Value="NaN" />
      <Style.Triggers>
        <DataTrigger Binding="{Binding MissDependencies}" Value="false">
          <Setter Property="Height" Value="0" />
        </DataTrigger>
      </Style.Triggers>
    </Style>
  </Page.Resources>
  <Grid>
    <GroupBox Header="{Binding I18n.I18nRes.ModManager}" Style="{StaticResource PageGroupBox}">
      <Grid>
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>
          <Grid x:Name="Grid_GroupMenu" MinWidth="32">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <i:Interaction.Triggers>
              <i:DataTrigger Binding="{Binding IsChecked, ElementName=Button_ExpandGroupMenu}" Value="True">
                <i:ChangePropertyAction PropertyName="Width" Value="NaN" />
              </i:DataTrigger>
              <i:DataTrigger Binding="{Binding IsChecked, ElementName=Button_ExpandGroupMenu}" Value="False">
                <i:ChangePropertyAction PropertyName="Width" Value="{Binding ActualWidth, ElementName=Button_ExpandGroupMenu}" />
              </i:DataTrigger>
            </i:Interaction.Triggers>
            <ToggleButton
              x:Name="Button_ExpandGroupMenu"
              Grid.Row="0"
              Margin="0"
              Padding="0,5,5,5"
              HorizontalAlignment="Left">
              <pu:ToggleButtonHelper.Icon>
                <emoji:TextBlock Text="{x:Static ST:STIcon.MenuOpenIcon}">
                  <i:Interaction.Triggers>
                    <i:DataTrigger Binding="{Binding IsChecked, ElementName=Button_ExpandGroupMenu}" Value="True">
                      <i:ChangePropertyAction PropertyName="Text" Value="{x:Static ST:STIcon.MenuOpenIcon}" />
                    </i:DataTrigger>
                    <i:DataTrigger Binding="{Binding IsChecked, ElementName=Button_ExpandGroupMenu}" Value="False">
                      <i:ChangePropertyAction PropertyName="Text" Value="{x:Static ST:STIcon.MenuCloseIcon}" />
                    </i:DataTrigger>
                  </i:Interaction.Triggers>
                </emoji:TextBlock>
              </pu:ToggleButtonHelper.Icon>
            </ToggleButton>
            <ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Auto">
              <i:Interaction.Triggers>
                <i:DataTrigger Binding="{Binding IsChecked, ElementName=Button_ExpandGroupMenu}" Value="True">
                  <i:ChangePropertyAction PropertyName="VerticalScrollBarVisibility" Value="Auto" />
                </i:DataTrigger>
                <i:DataTrigger Binding="{Binding IsChecked, ElementName=Button_ExpandGroupMenu}" Value="False">
                  <i:ChangePropertyAction PropertyName="VerticalScrollBarVisibility" Value="Hidden" />
                </i:DataTrigger>
              </i:Interaction.Triggers>
              <StackPanel>
                <ListBox
                  x:Name="ListBox_ModsGroupMenu"
                  HorizontalContentAlignment="Stretch"
                  ItemContainerStyle="{StaticResource ListBoxItemViewStyle}"
                  ItemsSource="{Binding ListBox_MainMenu.ItemsSource}"
                  PreviewMouseRightButtonDown="ListBox_PreviewMouseRightButtonDown"
                  PreviewMouseWheel="ListBox_PreviewMouseWheel"
                  SelectedItem="{Binding ListBox_MainMenu.SelectedItem}">
                  <i:Interaction.Triggers>
                    <i:EventTrigger EventName="SelectionChanged">
                      <i:InvokeCommandAction Command="{Binding ListBox_MainMenu.SelectionChangedCommand}" CommandParameter="{Binding ListBox_MainMenu.SelectedItem}" />
                    </i:EventTrigger>
                  </i:Interaction.Triggers>
                </ListBox>
                <Expander Header="{Binding I18n.I18nRes.GroupedByModType}" Style="{StaticResource ExpanderSelectedItemStyle}">
                  <Expander.ContextMenu>
                    <ContextMenu
                      DataContext="{Binding GroupTypeExpanderContextMenu}"
                      ItemContainerStyle="{StaticResource MenuItemViewStyle}"
                      ItemsSource="{Binding ItemsSource}">
                      <i:Interaction.Triggers>
                        <!--  使用Loaded时,如果有多个未载入的菜单,使用右键逐个点击只会载入第一个,故使用Opened  -->
                        <i:EventTrigger EventName="Opened">
                          <i:InvokeCommandAction Command="{Binding ContextMenu.LoadedCommand}" />
                        </i:EventTrigger>
                      </i:Interaction.Triggers>
                    </ContextMenu>
                  </Expander.ContextMenu>
                  <ListBox
                    x:Name="ListBox_ModTypeGroup"
                    HorizontalContentAlignment="Stretch"
                    ItemContainerStyle="{StaticResource ListBoxItemViewStyle}"
                    ItemsSource="{Binding ListBox_TypeGroupMenu.ItemsSource}"
                    PreviewMouseRightButtonDown="ListBox_PreviewMouseRightButtonDown"
                    PreviewMouseWheel="ListBox_PreviewMouseWheel"
                    SelectedItem="{Binding ListBox_TypeGroupMenu.SelectedItem}">
                    <i:Interaction.Triggers>
                      <i:EventTrigger EventName="SelectionChanged">
                        <i:InvokeCommandAction Command="{Binding ListBox_TypeGroupMenu.SelectionChangedCommand}" CommandParameter="{Binding ListBox_TypeGroupMenu.SelectedItem}" />
                      </i:EventTrigger>
                    </i:Interaction.Triggers>
                  </ListBox>
                </Expander>
                <Expander
                  Header="{Binding I18n.I18nRes.UserGroup}"
                  IsExpanded="True"
                  Style="{StaticResource ExpanderSelectedItemStyle}">
                  <ListBox
                    x:Name="ListBox_UserGroup"
                    HorizontalContentAlignment="Stretch"
                    ItemContainerStyle="{StaticResource ListBoxItemViewStyle}"
                    ItemsSource="{Binding ListBox_UserGroupMenu.ItemsSource}"
                    PreviewMouseRightButtonDown="ListBox_PreviewMouseRightButtonDown"
                    PreviewMouseWheel="ListBox_PreviewMouseWheel"
                    SelectedItem="{Binding ListBox_UserGroupMenu.SelectedItem}">
                    <i:Interaction.Triggers>
                      <i:EventTrigger EventName="SelectionChanged">
                        <i:InvokeCommandAction Command="{Binding ListBox_UserGroupMenu.SelectionChangedCommand}" CommandParameter="{Binding ListBox_UserGroupMenu.SelectedItem}" />
                      </i:EventTrigger>
                    </i:Interaction.Triggers>
                  </ListBox>
                </Expander>
              </StackPanel>
            </ScrollViewer>
            <Button
              x:Name="Button_AddUserGroup"
              Grid.Row="2"
              Margin="0"
              HorizontalContentAlignment="Left"
              pu:ButtonHelper.Icon="➕"
              Command="{Binding AddUserGroupCommand}"
              Content="{Binding I18n.I18nRes.AddUserGroup}" />
          </Grid>
          <Grid
            x:Name="Grid_DataGrid"
            Grid.Column="1"
            Margin="0,0,5,0">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition />
            </Grid.RowDefinitions>
            <Grid Grid.Row="0">
              <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" MinWidth="150" />
              </Grid.ColumnDefinitions>
              <TextBox
                x:Name="TextBox_SearchMods"
                Grid.Column="0"
                pu:TextBoxHelper.Watermark="{Binding I18n.I18nRes.SearchMod}"
                Text="{Binding ModFilterText, UpdateSourceTrigger=PropertyChanged}"
                TextWrapping="Wrap"
                ToolTip="{Binding I18n.I18nRes.SearchMod}" />
              <ComboBox
                x:Name="ComboBox_SearchType"
                Grid.Column="1"
                ItemsSource="{Binding ComboBox_ModFilterType.ItemsSource}"
                SelectedItem="{Binding ComboBox_ModFilterType.SelectedItem}"
                Style="{StaticResource ComboBoxViewStyle}">
                <i:Interaction.Triggers>
                  <i:EventTrigger EventName="SelectionChanged">
                    <i:InvokeCommandAction Command="{Binding ComboBox_ModFilterType.SelectionChangedCommand}" CommandParameter="{Binding ComboBox_ModFilterType.SelectedItem}" />
                  </i:EventTrigger>
                </i:Interaction.Triggers>
              </ComboBox>
            </Grid>
            <DataGrid
              x:Name="DataGrid_ModsShowList"
              Grid.Row="1"
              d:ItemsSource="{d:SampleData ItemCount=5}"
              d:SelectedIndex="1"
              pu:DataGridHelper.ColumnHeaderHorizontalContentAlignment="Center"
              AllowDrop="True"
              Drop="DataGrid_ModsShowList_Drop"
              GridLinesVisibility="Horizontal"
              ItemsSource="{Binding NowShowMods, IsAsync=True}"
              RowDetailsVisibilityMode="Visible"
              VirtualizingStackPanel.IsVirtualizing="True"
              VirtualizingStackPanel.VirtualizationMode="Recycling">
              <i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseDoubleClick">
                  <i:InvokeCommandAction Command="{Binding DataGridDoubleClickCommand}" />
                </i:EventTrigger>
                <i:EventTrigger EventName="SelectionChanged">
                  <i:InvokeCommandAction Command="{Binding DataGridSelectionChangedCommand}" CommandParameter="{Binding SelectedItems, ElementName=DataGrid_ModsShowList}" />
                </i:EventTrigger>
              </i:Interaction.Triggers>
              <DataGrid.InputBindings>
                <KeyBinding Command="ApplicationCommands.NotACommand" Gesture="Delete" />
              </DataGrid.InputBindings>
              <DataGrid.RowStyle>
                <Style BasedOn="{StaticResource {x:Type DataGridRow}}" TargetType="DataGridRow">
                  <Setter Property="Tag" Value="{Binding Id}" />
                  <Setter Property="IsSelected" Value="{Binding IsSelected}" />
                  <Setter Property="ContextMenu">
                    <Setter.Value>
                      <ContextMenu ItemContainerStyle="{StaticResource MenuItemViewStyle}" ItemsSource="{Binding ContextMenu.ItemsSource}">
                        <i:Interaction.Triggers>
                          <!--  使用Loaded时,如果有多个未载入的菜单,使用右键挨个点击只会载入第一个,故使用Opened  -->
                          <i:EventTrigger EventName="Opened">
                            <i:InvokeCommandAction Command="{Binding ContextMenu.LoadedCommand}" />
                          </i:EventTrigger>
                        </i:Interaction.Triggers>
                      </ContextMenu>
                    </Setter.Value>
                  </Setter>
                  <Style.Triggers>
                    <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                      <Setter Property="Background" Value="{DynamicResource ColorLight2}" />
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </DataGrid.RowStyle>
              <DataGrid.Columns>
                <DataGridTemplateColumn CanUserSort="True" SortMemberPath="IsCollected">
                  <DataGridTemplateColumn.Header>
                    <emoji:TextBlock Text="🌟" ToolTip="{Binding DataContext.I18n.I18nRes.ShowModCollectState, ElementName=Page_MainPage}" />
                  </DataGridTemplateColumn.Header>
                  <DataGridTemplateColumn.CellTemplate>
                    <DataTemplate>
                      <ToggleButton
                        x:Name="Button_Collected"
                        Margin="0,10,0,10"
                        pu:ToggleButtonHelper.CheckedBackground="{DynamicResource WindowGlassBrush}"
                        pu:ToggleButtonHelper.CheckedContent="{Binding DataContext.I18n.I18nRes.Collected, ElementName=Page_MainPage}"
                        Command="{Binding DataContext.CollectedCommand, ElementName=Page_MainPage}"
                        Content="{Binding DataContext.I18n.I18nRes.UnCollected, ElementName=Page_MainPage}" />
                    </DataTemplate>
                  </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn CanUserSort="True" SortMemberPath="IsEnabled">
                  <DataGridTemplateColumn.Header>
                    <Label Content="{Binding DataContext.I18n.I18nRes.EnabledState, ElementName=Page_MainPage}" ToolTip="{Binding DataContext.I18n.I18nRes.ShowModEnableState, ElementName=Page_MainPage}" />
                  </DataGridTemplateColumn.Header>
                  <DataGridTemplateColumn.CellTemplate>
                    <DataTemplate>
                      <ToggleButton
                        x:Name="Button_Enabled"
                        Margin="0,10,0,10"
                        pu:ToggleButtonHelper.CheckedBackground="{DynamicResource WindowGlassBrush}"
                        pu:ToggleButtonHelper.CheckedContent="{Binding DataContext.I18n.I18nRes.Enabled, ElementName=Page_MainPage}"
                        Command="{Binding DataContext.EnabledCommand, ElementName=Page_MainPage}"
                        Content="{Binding DataContext.I18n.I18nRes.Disabled, ElementName=Page_MainPage}" />
                    </DataTemplate>
                  </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn IsReadOnly="True">
                  <DataGridTemplateColumn.Header>
                    <Label Content="{Binding DataContext.I18n.I18nRes.Icon, ElementName=Page_MainPage}" ToolTip="{Binding DataContext.I18n.I18nRes.ShowModIcon, ElementName=Page_MainPage}" />
                  </DataGridTemplateColumn.Header>
                  <DataGridTemplateColumn.CellTemplate>
                    <DataTemplate>
                      <!--  TODO: 图片自适应大小  -->
                      <Image
                        MinWidth="64"
                        MinHeight="64"
                        MaxWidth="64"
                        MaxHeight="64"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Source="{Binding ImageSource, IsAsync=True}"
                        Stretch="Uniform" />
                    </DataTemplate>
                  </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTextColumn
                  Binding="{Binding Name}"
                  CanUserSort="True"
                  ElementStyle="{StaticResource CenterAlignmentStyle}"
                  IsReadOnly="True"
                  SortMemberPath="Name">
                  <DataGridTextColumn.Header>
                    <Label Content="{Binding DataContext.I18n.I18nRes.Name, ElementName=Page_MainPage}" ToolTip="{Binding DataContext.I18n.I18nRes.ShowModName, ElementName=Page_MainPage}" />
                  </DataGridTextColumn.Header>
                </DataGridTextColumn>
                <DataGridTextColumn
                  Width="100"
                  Binding="{Binding Author}"
                  ElementStyle="{StaticResource CenterAlignmentStyle}"
                  IsReadOnly="True">
                  <DataGridTextColumn.Header>
                    <Label Content="{Binding DataContext.I18n.I18nRes.Author, ElementName=Page_MainPage}" ToolTip="{Binding DataContext.I18n.I18nRes.ShowModAuthor, ElementName=Page_MainPage}" />
                  </DataGridTextColumn.Header>
                </DataGridTextColumn>
                <DataGridTextColumn
                  Binding="{Binding Version}"
                  ElementStyle="{StaticResource CenterAlignmentStyle}"
                  IsReadOnly="True">
                  <DataGridTextColumn.Header>
                    <Label Content="{Binding DataContext.I18n.I18nRes.Version, ElementName=Page_MainPage}" ToolTip="{Binding DataContext.I18n.I18nRes.ShowModVersion, ElementName=Page_MainPage}" />
                  </DataGridTextColumn.Header>
                </DataGridTextColumn>
                <DataGridTextColumn
                  Binding="{Binding GameVersion}"
                  CanUserSort="True"
                  ElementStyle="{StaticResource GameVersionStyle}"
                  IsReadOnly="True"
                  SortMemberPath="IsSameToGameVersion">
                  <DataGridTextColumn.Header>
                    <Label Content="{Binding DataContext.I18n.I18nRes.GameVersion, ElementName=Page_MainPage}" ToolTip="{Binding DataContext.I18n.I18nRes.ShowGameVersion, ElementName=Page_MainPage}" />
                  </DataGridTextColumn.Header>
                </DataGridTextColumn>
                <DataGridTextColumn
                  CanUserSort="True"
                  ElementStyle="{StaticResource UtilityStyle}"
                  IsReadOnly="True"
                  SortMemberPath="IsUtility">
                  <DataGridTextColumn.Header>
                    <Label Content="{Binding DataContext.I18n.I18nRes.Utility, ElementName=Page_MainPage}" ToolTip="{Binding DataContext.I18n.I18nRes.ShowUtility, ElementName=Page_MainPage}" />
                  </DataGridTextColumn.Header>
                </DataGridTextColumn>
                <DataGridTextColumn
                  Binding="{Binding LastUpdateTimeString}"
                  CanUserSort="True"
                  IsReadOnly="True"
                  SortMemberPath="LastUpdateTime">
                  <DataGridTextColumn.ElementStyle>
                    <Style BasedOn="{StaticResource CenterAlignmentStyle}" TargetType="TextBlock">
                      <Setter Property="ToolTip" Value="{x:Null}" />
                    </Style>
                  </DataGridTextColumn.ElementStyle>
                  <DataGridTextColumn.Header>
                    <Label Content="{Binding DataContext.I18n.I18nRes.LastUpdateTime, ElementName=Page_MainPage}" ToolTip="{Binding DataContext.I18n.I18nRes.LastUpdateTime, ElementName=Page_MainPage}" />
                  </DataGridTextColumn.Header>
                </DataGridTextColumn>
                <DataGridTextColumn Binding="{Binding UserDescription}" IsReadOnly="True">
                  <DataGridTextColumn.ElementStyle>
                    <Style BasedOn="{StaticResource CenterAlignmentStyle}" TargetType="TextBlock">
                      <Setter Property="ToolTip" Value="{x:Null}" />
                    </Style>
                  </DataGridTextColumn.ElementStyle>
                  <DataGridTextColumn.Header>
                    <Label Content="{Binding DataContext.I18n.I18nRes.UserDescription, ElementName=Page_MainPage}" ToolTip="{Binding DataContext.I18n.I18nRes.ShowUserDescription, ElementName=Page_MainPage}" />
                  </DataGridTextColumn.Header>
                </DataGridTextColumn>
              </DataGrid.Columns>
              <DataGrid.RowDetailsTemplate>
                <DataTemplate>
                  <StackPanel Orientation="Horizontal" Style="{StaticResource MissDependenciesStyle}">
                    <Button
                      x:Name="Button_EnableDependencies"
                      Margin="5,0,0,0"
                      Command="{Binding DataContext.EnableDependenciesCommand, ElementName=Page_MainPage}"
                      Content="{Binding DataContext.I18n.I18nRes.EnableDependencies, ElementName=Page_MainPage}"
                      ToolTip="{Binding Content, RelativeSource={RelativeSource Mode=Self}}" />
                    <Label
                      HorizontalContentAlignment="Left"
                      Content="{Binding MissDependenciesMessage}"
                      ToolTip="{Binding Content, RelativeSource={RelativeSource Mode=Self}}" />
                  </StackPanel>
                </DataTemplate>
              </DataGrid.RowDetailsTemplate>
            </DataGrid>
          </Grid>
          <Grid
            x:Name="Grid_RightSide"
            Grid.Column="2"
            MinWidth="120">
            <Grid.RowDefinitions>
              <RowDefinition />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <ScrollViewer
              Grid.Row="0"
              Margin="0,0,0,5"
              VerticalScrollBarVisibility="Auto">
              <StackPanel>
                <Expander Margin="0,0,0,5" Header="{Binding I18n.I18nRes.OpenDirectory}">
                  <StackPanel>
                    <Button
                      x:Name="Button_OpenModDirectory"
                      Height="30"
                      Margin="0,0,0,5"
                      Command="{Binding OpenModDirectoryCommand}"
                      Content="{Binding I18n.I18nRes.OpenModsDirectory}" />
                    <Button
                      x:Name="Button_OpenBackupDirectory"
                      Height="30"
                      Margin="0,0,0,5"
                      Command="{Binding OpenBackupDirectoryCommand}"
                      Content="{Binding I18n.I18nRes.OpenBackupDirectory}" />
                    <Button
                      x:Name="Button_OpenSaveDirectory"
                      Height="30"
                      Margin="0,0,0,5"
                      Command="{Binding OpenSaveDirectoryCommand}"
                      Content="{Binding I18n.I18nRes.OpenSaveDirectory}" />
                  </StackPanel>
                </Expander>
                <Expander
                  Margin="0,0,0,5"
                  Header="{Binding I18n.I18nRes.ManipulateUserData}"
                  ToolTip="{Binding I18n.I18nRes.ManipulateUserDataToolTip}">
                  <StackPanel>
                    <Button
                      x:Name="Button_ImportUserData"
                      Height="30"
                      Margin="0,0,0,5"
                      Command="{Binding ImportUserDataCommand}"
                      Content="{Binding I18n.I18nRes.ImportUserData}" />
                    <Button
                      x:Name="Button_ExportUserData"
                      Height="30"
                      Margin="0,0,0,5"
                      Command="{Binding ExportUserDataCommand}"
                      Content="{Binding I18n.I18nRes.ExportUserData}" />
                  </StackPanel>
                </Expander>
                <Expander Margin="0,0,0,5" Header="{Binding I18n.I18nRes.ManipulateUserGroup}">
                  <StackPanel>
                    <Button
                      x:Name="Button_ImportUserGroup"
                      Height="30"
                      Margin="0,0,0,5"
                      Command="{Binding ImportUserGroupCommand}"
                      Content="{Binding I18n.I18nRes.ImportUserGroup}" />
                    <ComboBox
                      x:Name="ComboBox_ExportUserGroup"
                      Height="30"
                      Margin="0,0,0,5"
                      VerticalAlignment="Top"
                      DisplayMemberPath="Content"
                      ItemsSource="{Binding ComboBox_ExportUserGroup.ItemsSource}"
                      SelectedIndex="0"
                      SelectedItem="{Binding ComboBox_ExportUserGroup.SelectedItem}" />
                    <Button
                      x:Name="Button_ExportUserGroup"
                      Height="30"
                      Margin="0,0,0,5"
                      Command="{Binding ExportUserGroupCommand}"
                      Content="{Binding I18n.I18nRes.ExportUserGroup}" />
                  </StackPanel>
                </Expander>
                <Expander Margin="0,0,0,5" Header="{Binding I18n.I18nRes.ManipulateEnabledList}">
                  <StackPanel>
                    <Button
                      x:Name="Button_ImportEnabledListFromSave"
                      Height="30"
                      Margin="0,0,0,5"
                      Command="{Binding ImportEnabledListFromSaveCommand}"
                      Content="{Binding I18n.I18nRes.ImportFromSave}" />
                    <Button
                      x:Name="Button_ImportEnabledList"
                      Height="30"
                      Margin="0,0,0,5"
                      Command="{Binding ImportEnabledListCommand}"
                      Content="{Binding I18n.I18nRes.ImportEnabledList}" />
                    <Button
                      x:Name="Button_ExportEnabledList"
                      Height="30"
                      Margin="0,0,0,5"
                      Command="{Binding ExportEnabledListCommand}"
                      Content="{Binding I18n.I18nRes.ExportEnabledList}" />
                  </StackPanel>
                </Expander>
                <Expander
                  x:Name="Expander_RandomEnable"
                  Margin="0,0,0,5"
                  Header="{Binding I18n.I18nRes.RandomEnableMods}">
                  <Expander.Style>
                    <Style BasedOn="{StaticResource {x:Type Expander}}" TargetType="Expander">
                      <Setter Property="Visibility" Value="Collapsed" />
                      <Style.Triggers>
                        <DataTrigger Binding="{Binding NowSelectedIsUserGroup}" Value="True">
                          <Setter Property="Visibility" Value="Visible" />
                        </DataTrigger>
                      </Style.Triggers>
                    </Style>
                  </Expander.Style>
                  <StackPanel>
                    <Grid Margin="0,0,0,5">
                      <TextBox
                        x:Name="TextBox_MinRandomSize"
                        Height="30"
                        InputMethod.IsInputMethodEnabled="False"
                        PreviewTextInput="TextBox_NumberInput"
                        Text="{Binding MinRandomSize, UpdateSourceTrigger=PropertyChanged}"
                        ToolTip="{Binding I18n.I18nRes.MinRandomNumber}" />
                      <!--  TextBox输入占位符  -->
                      <Label
                        Width="{Binding Width, ElementName=TextBox_MinRandomSize}"
                        Height="{Binding Height, ElementName=TextBox_MinRandomSize}"
                        Margin="{Binding Margin, ElementName=TextBox_MinRandomSize}"
                        HorizontalAlignment="{Binding HorizontalAlignment, ElementName=TextBox_MinRandomSize}"
                        VerticalAlignment="{Binding VerticalAlignment, ElementName=TextBox_MinRandomSize}"
                        Content="{Binding I18n.I18nRes.MinRandomNumber}"
                        IsEnabled="False"
                        IsHitTestVisible="False">
                        <Label.Style>
                          <Style BasedOn="{StaticResource {x:Type Label}}" TargetType="Label">
                            <Setter Property="Visibility" Value="Hidden" />
                            <Style.Triggers>
                              <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                  <Condition Binding="{Binding Text, ElementName=TextBox_MinRandomSize}" Value="" />
                                  <Condition Binding="{Binding IsFocused, ElementName=TextBox_MinRandomSize}" Value="False" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                  <Setter Property="Visibility" Value="Visible" />
                                </MultiDataTrigger.Setters>
                              </MultiDataTrigger>
                            </Style.Triggers>
                          </Style>
                        </Label.Style>
                      </Label>
                    </Grid>
                    <Grid Margin="0,0,0,5">
                      <TextBox
                        x:Name="TextBox_MaxRandomSize"
                        Height="30"
                        InputMethod.IsInputMethodEnabled="False"
                        PreviewTextInput="TextBox_NumberInput"
                        Text="{Binding MaxRandomSize, UpdateSourceTrigger=PropertyChanged}"
                        ToolTip="{Binding I18n.I18nRes.MaxRandomNumber}" />
                      <!--  TextBox输入占位符  -->
                      <Label
                        Width="{Binding Width, ElementName=TextBox_MaxRandomSize}"
                        Height="{Binding Height, ElementName=TextBox_MaxRandomSize}"
                        Margin="{Binding Margin, ElementName=TextBox_MaxRandomSize}"
                        HorizontalAlignment="{Binding HorizontalAlignment, ElementName=TextBox_MaxRandomSize}"
                        VerticalAlignment="{Binding VerticalAlignment, ElementName=TextBox_MaxRandomSize}"
                        Content="{Binding I18n.I18nRes.MaxRandomNumber}"
                        IsEnabled="False"
                        IsHitTestVisible="False">
                        <Label.Style>
                          <Style BasedOn="{StaticResource {x:Type Label}}" TargetType="Label">
                            <Setter Property="Visibility" Value="Hidden" />
                            <Style.Triggers>
                              <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                  <Condition Binding="{Binding Text, ElementName=TextBox_MaxRandomSize}" Value="" />
                                  <Condition Binding="{Binding IsFocused, ElementName=TextBox_MaxRandomSize}" Value="False" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                  <Setter Property="Visibility" Value="Visible" />
                                </MultiDataTrigger.Setters>
                              </MultiDataTrigger>
                            </Style.Triggers>
                          </Style>
                        </Label.Style>
                      </Label>
                    </Grid>
                    <Button
                      x:Name="Button_RandomMods"
                      Height="30"
                      Margin="0,0,0,5"
                      Command="{Binding RandomEnableModsCommand}"
                      Content="{Binding I18n.I18nRes.RandomEnableMods}" />
                  </StackPanel>
                </Expander>
              </StackPanel>
            </ScrollViewer>
            <Button
              x:Name="Button_Save"
              Grid.Row="1"
              Command="{Binding SaveCommand}"
              Content="{Binding I18n.I18nRes.SaveConfig}"
              Style="{StaticResource RemindStyle}"
              Tag="False">
              <pu:ButtonHelper.Icon>
                <emoji:TextBlock Text="💾" />
              </pu:ButtonHelper.Icon>
            </Button>
          </Grid>
        </Grid>
        <Grid
          x:Name="Grid_ModDetails"
          Width="400"
          HorizontalAlignment="Right"
          d:Tag="True"
          Tag="{Binding IsShowModDetails}">
          <Grid.Style>
            <Style TargetType="Grid">
              <Setter Property="Visibility" Value="Hidden" />
              <Style.Triggers>
                <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                  <Setter Property="Visibility" Value="Visible" />
                </DataTrigger>
              </Style.Triggers>
            </Style>
          </Grid.Style>
          <Grid.ColumnDefinitions>
            <ColumnDefinition MinWidth="30" />
            <ColumnDefinition Width="*" MinWidth="300" />
          </Grid.ColumnDefinitions>
          <GridSplitter
            Grid.Column="0"
            Width="5"
            Margin="0,0,10,0"
            HorizontalContentAlignment="Right"
            VerticalContentAlignment="Stretch"
            Background="#11FFFFFF" />
          <Button
            x:Name="Button_CLoseModDetails"
            Grid.Column="0"
            Width="10"
            MinWidth="0"
            MinHeight="0"
            Margin="0"
            Padding="0"
            HorizontalAlignment="Right"
            pu:ButtonHelper.CornerRadius="4,0,0,4"
            pu:ButtonHelper.ShadowColor="{DynamicResource ShadowColor}"
            Background="{DynamicResource BackgroundColor}"
            Command="{Binding CloseModDetailsButtonCommand}"
            Content="》" />
          <GroupBox
            x:Name="GroupBox_ModDetails"
            Grid.Column="1"
            Header="{Binding I18n.I18nRes.ModInfo}">
            <i:Interaction.Triggers>
              <i:PropertyChangedTrigger Binding="{Binding IsMouseOver, ElementName=GroupBox_ModDetails, UpdateSourceTrigger=PropertyChanged}">
                <i:InvokeCommandAction Command="{Binding ModDetailsMouseOverCommand}" CommandParameter="{Binding IsMouseOver, ElementName=GroupBox_ModDetails}" />
              </i:PropertyChangedTrigger>
            </i:Interaction.Triggers>
            <ScrollViewer>
              <StackPanel>
                <Grid Margin="0,0,0,5">
                  <Image
                    x:Name="Image_ModImage"
                    MaxHeight="100"
                    Source="{Binding NowSelectedMod.ImageSource}" />
                </Grid>
                <Grid Margin="0,0,0,5">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition />
                  </Grid.ColumnDefinitions>
                  <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                  </Grid.RowDefinitions>
                  <!--  TODO 需要解决冒号问题  -->
                  <Label HorizontalContentAlignment="Left" Content="ID" />
                  <Label
                    Grid.Row="1"
                    HorizontalContentAlignment="Left"
                    Content="{Binding I18n.I18nRes.Name}" />
                  <Label
                    Grid.Row="2"
                    HorizontalContentAlignment="Left"
                    Content="{Binding I18n.I18nRes.Version}" />
                  <Label
                    Grid.Row="3"
                    HorizontalContentAlignment="Left"
                    Content="{Binding I18n.I18nRes.GameVersion}" />
                  <Label
                    Grid.Row="4"
                    HorizontalContentAlignment="Left"
                    Content="{Binding I18n.I18nRes.LastUpdateTime}" />
                  <TextBox
                    Grid.Row="0"
                    Grid.Column="1"
                    HorizontalContentAlignment="Left"
                    BorderThickness="0"
                    IsReadOnly="True"
                    Text="{Binding NowSelectedMod.Id, Mode=OneWay}"
                    ToolTip="{Binding Text, RelativeSource={RelativeSource Mode=Self}}" />
                  <TextBox
                    Grid.Row="1"
                    Grid.Column="1"
                    HorizontalContentAlignment="Center"
                    VerticalContentAlignment="Center"
                    BorderThickness="0"
                    IsReadOnly="True"
                    Text="{Binding NowSelectedMod.Name, Mode=OneWay}"
                    ToolTip="{Binding Text, RelativeSource={RelativeSource Mode=Self}}" />
                  <TextBox
                    Grid.Row="2"
                    Grid.Column="1"
                    HorizontalContentAlignment="Left"
                    BorderThickness="0"
                    IsReadOnly="True"
                    Text="{Binding NowSelectedMod.Version, Mode=OneWay}"
                    ToolTip="{Binding Text, RelativeSource={RelativeSource Mode=Self}}" />
                  <TextBox
                    Grid.Row="3"
                    Grid.Column="1"
                    HorizontalContentAlignment="Left"
                    BorderThickness="0"
                    IsReadOnly="True"
                    Text="{Binding NowSelectedMod.GameVersion, Mode=OneWay}"
                    ToolTip="{Binding Text, RelativeSource={RelativeSource Mode=Self}}" />
                  <TextBox
                    Grid.Row="4"
                    Grid.Column="1"
                    HorizontalContentAlignment="Left"
                    BorderThickness="0"
                    IsReadOnly="True"
                    Text="{Binding NowSelectedMod.LastUpdateTimeString, Mode=OneWay}"
                    ToolTip="{Binding Text, RelativeSource={RelativeSource Mode=Self}}" />
                </Grid>
                <Label Margin="0,0,0,5">
                  <Hyperlink
                    Command="{Binding OpenModPathCommand}"
                    CommandParameter="{Binding NowSelectedMod.ModDirectory}"
                    Cursor="Hand"
                    NavigateUri="{Binding NowSelectedMod.ModDirectory, Mode=OneWay}">
                    <TextBlock Text="{Binding NowSelectedMod.ModDirectory, Mode=OneWay}" ToolTip="{Binding Text, RelativeSource={RelativeSource Mode=Self}}" />
                  </Hyperlink>
                </Label>
                <GroupBox Margin="0,0,0,5" Header="{Binding I18n.I18nRes.Author}">
                  <TextBox
                    x:Name="TextBlock_ModAuthor"
                    VerticalAlignment="Top"
                    IsReadOnly="True"
                    Text="{Binding NowSelectedMod.Author, Mode=OneWay}"
                    TextWrapping="Wrap"
                    ToolTip="{Binding Text, RelativeSource={RelativeSource Mode=Self}}" />
                </GroupBox>
                <GroupBox
                  x:Name="GroupBox_ModDependencies"
                  Margin="0,0,0,5"
                  d:Tag=""
                  Header="{Binding I18n.I18nRes.Dependencies}"
                  Tag="{Binding Text, ElementName=TextBlock_ModDependencies}">
                  <GroupBox.Style>
                    <Style BasedOn="{StaticResource {x:Type GroupBox}}" TargetType="GroupBox">
                      <Setter Property="Visibility" Value="Visible" />
                      <Style.Triggers>
                        <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Mode=Self}}" Value="">
                          <Setter Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                      </Style.Triggers>
                    </Style>
                  </GroupBox.Style>
                  <TextBox
                    x:Name="TextBlock_ModDependencies"
                    IsReadOnly="True"
                    Text="{Binding NowSelectedMod.DependenciesMessage, Mode=OneWay}"
                    TextWrapping="Wrap"
                    ToolTip="{Binding Text, RelativeSource={RelativeSource Mode=Self}}" />
                </GroupBox>
                <GroupBox Margin="0,0,0,5" Header="{Binding I18n.I18nRes.Description}">
                  <TextBox
                    x:Name="TextBlock_ModDescription"
                    IsReadOnly="True"
                    Text="{Binding NowSelectedMod.Description, Mode=OneWay}"
                    TextWrapping="Wrap"
                    ToolTip="{Binding Text, RelativeSource={RelativeSource Mode=Self}}" />
                </GroupBox>
                <GroupBox Header="{Binding I18n.I18nRes.UserDescription}">
                  <TextBox
                    x:Name="TextBox_UserDescription"
                    Text="{Binding NowSelectedMod.UserDescription, UpdateSourceTrigger=PropertyChanged}"
                    TextWrapping="Wrap"
                    ToolTip="{Binding Text, RelativeSource={RelativeSource Mode=Self}}" />
                </GroupBox>
              </StackPanel>
            </ScrollViewer>
          </GroupBox>
        </Grid>
      </Grid>
    </GroupBox>
  </Grid>
</Page>